struct TileData {
    image: image,
    image_visible: bool,
    solved: bool,
}


component MemoryTile inherits Rectangle {
    callback clicked;

    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon;

    height: 64px;
    width: 64px;
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    Image {
        source: icon;
        width: parent.width;
        height: parent.height;
    }

    // Left curtain
    Rectangle {
        background: #193076;
        x: 0px;
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        animate width {
            duration: 250ms;
            easing: ease-in;
        }
    }

    // Right curtain
    Rectangle {
        background: #193706;
        x: open_curtain ? parent.width : (parent.width / 2);
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        animate width {
            duration: 250ms;
            easing: ease-in;
        }
        animate x {
            duration: 250ms;
            easing: ease-in;
        }
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }
}
import { Button} from "std-widgets.slint";

export component MainWindow inherits Window {
    

    callback check_if_pair_solved();
    // Added
    in property <bool> disable_tiles;
    // Added

    in-out property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];
    in-out property <int> score: 0;
    in-out property <int> attempts: 0;
    in-out property <int> time_elapsed: 0;

    callback pause_resume();

   VerticalLayout {
    
    
    spacing: 10px;
    
    Text {text: "Memory";
        color: #0f0f0f;
        font-size: 24px;
        width: 200px;
        border-color: black;
        
    }
   
    
   
 Rectangle {
        width: 200px;
        height: 250px;
        x: 250px;      
        background: #1a1818;
        border-radius: 5px;

       
    
    Text {
        text: "Score: " + score;
        color: #FFFFFF;
        font-size: 16px;
        y: 0px;
        
    }

    Text {
        text: "Attempts: " + attempts;
        color: #FFFFFF;
        font-size: 16px;
        y: 24px;
        
       
    }

    Text {
        text: "Time: " + time_elapsed + " seconds";
        color: #FFFFFF;
   
        y:80px;
        font-size: 16px;
    }

  
    Button {
            text: "Pause/Resume";
            
            
        }
         // Pause/Resume Button as a Rectangle
 TouchArea {
    clicked => {
        root.pause_resume();
    }
}

        // TouchArea for button interaction
    }
   

        Rectangle {
            min-width: 600px;
            height: 350px;
            x: 200px;
            
          
         
            for tile[i] in memory_tiles: MemoryTile {
                x: mod(i, 4) * 74px;
                y: floor(i / 4) * 74px;
                width: 64px;
                height: 64px;
                icon: tile.image;
                open_curtain: tile.image_visible || tile.solved;
                // propagate the solved status from the model to the tile
            solved: tile.solved;
                clicked => {
                    //Old [Player can open more than one tiles]  tile.image_visible = !tile.image_visible;
              // New [Prevent player from opening more tiles than allowed]
    
              if (!root.disable_tiles) {
                        tile.image-visible = true;
                        root.check_if_pair_solved();
                    }
                }
            }

        }}
    }

       

