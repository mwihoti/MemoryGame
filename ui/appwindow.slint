struct TileData {
    image: image,
    image_visible: bool,
    solved: bool,
}


component MemoryTile inherits Rectangle {
    callback clicked;

    in property <bool> open_curtain;
    in property <bool> solved;
    in property <image> icon;

    height: 80%;
    width: 80%;
    x: 40px;
    
    background: solved ? #34CE57 : #3960D5;
    animate background { duration: 800ms; }

    Image {
        source: icon;
        width: parent.width;
        height: parent.height;
    }

    // Left curtain
    Rectangle {
        background: #193076;
        x: 0px;
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        animate width {
            duration: 250ms;
            easing: ease-in;
        }
    }

    // Right curtain
    Rectangle {
        background: #193706;
        x: open_curtain ? parent.width : (parent.width / 2);
        width: open_curtain ? 0px : (parent.width / 2);
        height: parent.height;
        animate width {
            duration: 250ms;
            easing: ease-in;
        }
        animate x {
            duration: 250ms;
            easing: ease-in;
        }
    }

    TouchArea {
        clicked => {
            root.clicked();
        }
    }}

import { Button, VerticalBox, HorizontalBox } from "std-widgets.slint";

export component MainWindow inherits Window {
    in-out property <string> error_message: "";
    
    

    callback check_if_pair_solved();
    // Added
    in property <bool> disable_tiles;
    // Added

    in-out property <[TileData]> memory_tiles: [
        { image: @image-url("icons/at.png") },
        { image: @image-url("icons/balance-scale.png") },
        { image: @image-url("icons/bicycle.png") },
        { image: @image-url("icons/bus.png") },
        { image: @image-url("icons/cloud.png") },
        { image: @image-url("icons/cogs.png") },
        { image: @image-url("icons/motorcycle.png") },
        { image: @image-url("icons/video.png") },
    ];
    in-out property <int> score: 0;
    in-out property <int> attempts: 0;
    in-out property <int> time_elapsed: 0;
    in-out property <string> congratulations_message: "";
    in-out property <string> player_name: "";
    in-out property <bool> show_congratulations_message: false;
    //callback start_game();
    callback restart_game();
    callback pause_resume();
    callback reset_game();
    callback quit();
    
    VerticalLayout {
        spacing: 10px;
        width: 90%;  // Adjusted to fit within screen
        height: 50%; // Adjusted to fit within screen
    
        Rectangle {
            width: 100%;  // Use full width available
            background: #c2c0c0;
            padding: 10px;
          

    
            VerticalBox {
               alignment: center;
                spacing: 10px;
    
                Text {
                    
                    text: "Memory Game";
                    color: #5d6785c7;
                    font-size: 20px;  // Adjusted font size
                }
    
            HorizontalBox{ 
               
                
               
    
                Button {
                    text: "Restart Game";
                    clicked => {
                        root.reset_game();
                    }
                }
                 
                Button {
                    text: "Qiut Game";
                    clicked => {
                        root.quit();
                    }
                }
            }
        }}
    
        HorizontalBox {  // Use horizontal layout for better fit
            spacing: 10px;
            height: 100%;
            alignment:center;
    
            Rectangle {
                width: 40%;  // Reduced width
                
                background: #1a1818;
                border-radius: 5px;
                padding: 10px;
    
                VerticalBox {
                    spacing: 10px;
    
                    
    
                    Text {
                        text: "Score: " + score;
                        color: #FFFFFF;
                        font-size: 14px;
                    }
    
                    Text {
                        text: "Attempts: " + attempts;
                        color: #FFFFFF;
                        font-size: 14px;
                    }
    
                    Text {
                        text: "Time: " + time_elapsed + " seconds";
                        color: #FFFFFF;
                        font-size: 14px;
                    }
    
                    //Button {
                      //  text: "Restart Time";
                        //clicked => {
                  //          root.pause_resume();
                        //}
                    //}
                }
            }
            for t in [ "Memory  GAME. How fast are you?", "!" ] : Text {
                text: t;
            }
    
          VerticalBox { // Memory tiles grid 
            
            Rectangle {
                width: 60%;  // Responsive width
                background: #2a2a2a;
                padding: 30px;
              
                


              Rectangle { 
                for tile[i] in memory_tiles: MemoryTile {
                    x: mod(i, 4) * 84px;
                    y: floor(i / 4) * 84px;
                    width: 64px;
                    height: 64px;
                    icon: tile.image;
                    padding: 20px;
                   
                    open_curtain: tile.image_visible || tile.solved;
                    // propagate the solved status from the model to the tile
                solved: tile.solved;
                    clicked => {
                        //Old [Player can open more than one tiles]  tile.image_visible = !tile.image_visible;
                  // New [Prevent player from opening more tiles than allowed]
        
                  if (!root.disable_tiles) {
                            tile.image-visible = true;
                            root.check_if_pair_solved();
                        }
                    }
                }}}
    
               }
                }
            
        }
    
        // Congratulatory message
        Rectangle {
            width: 80%;
            height: 50px;
            background: #32CD32;
            border-radius: 10px;
            visible: show_congratulations_message;
            
    
            Text {
                text: congratulations_message;
                color: #FFFFFF;
                font-size: 20px;
                horizontal-alignment: center;
                vertical-alignment: center;
            }
        }
    }